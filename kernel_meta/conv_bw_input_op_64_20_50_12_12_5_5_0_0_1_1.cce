#ifdef __CCE_KT_TEST__
#define __aicore__ 
#else
#define __aicore__ [aicore]
#endif


#define VERIFY_L2Buffer_OK(l2DataIndex) \
	(0x01 & (((0xFF)&(~l2_in_main)) >> (l2DataIndex)))

extern "C"  __global__ __aicore__ void conv_bw_input_op_64_20_50_12_12_5_5_0_0_1_1__kernel0(__gm__ half* __restrict__ weight_five, __gm__ half* __restrict__ out_diff, __gm__ half* __restrict__ c_ddr,int64_t index0, uint64_t offset0, int64_t index1, uint64_t offset1, int64_t index2, uint64_t offset2) {
  if (index0 >= 0) {
    if (VERIFY_L2Buffer_OK(index0)) {
      weight_five = (__gm__ half*)((uint64_t)l2_vaddr_base + offset0);
    }
  }
  if (index1 >= 0) {
    if (VERIFY_L2Buffer_OK(index1)) {
      out_diff = (__gm__ half*)((uint64_t)l2_vaddr_base + offset1);
    }
  }
  if (index2 >= 0) {
    if (VERIFY_L2Buffer_OK(index2)) {
      c_ddr = (__gm__ half*)((uint64_t)l2_vaddr_base + offset2);
    }
  }
set_l1_3d_size(0);
set_padding(0);
__cbuf__   half* weight_five_local_L1 = (__cbuf__  half *)get_imm(0);
__cbuf__   half* out_diff_local_L1 = (__cbuf__  half *)get_imm(102400);
__cc__   float* C = (__cc__  float *)get_imm(0);
__ca__   half* im2col_fractal_1 = (__ca__  half *)get_imm(0);
__cb__   half* w_col_2 = (__cb__  half *)get_imm(0);
__ca__   half* im2col_fractal_3 = (__ca__  half *)get_imm(12800);
__cb__   half* w_col_4 = (__cb__  half *)get_imm(5120);
__ubuf__   half* c_ub = (__ubuf__  half *)get_imm(0);
__cbuf__   half* out_diff_local_L11 = (__cbuf__  half *)get_imm(110592);
__cc__   float* C1 = (__cc__  float *)get_imm(10240);
__ca__   half* im2col_fractal_5 = (__ca__  half *)get_imm(25600);
__ca__   half* im2col_fractal_7 = (__ca__  half *)get_imm(35840);
__ubuf__   half* c_ub1 = (__ubuf__  half *)get_imm(5120);
  set_flag(PIPE_MTE3, PIPE_V, EVENT_ID1);
  set_flag(PIPE_V, PIPE_M, EVENT_ID1);
  set_flag(PIPE_MTE1, PIPE_MTE2, EVENT_ID1);
  set_flag(PIPE_MTE3, PIPE_V, EVENT_ID0);
  set_flag(PIPE_V, PIPE_M, EVENT_ID0);
  set_flag(PIPE_MTE1, PIPE_MTE2, EVENT_ID0);
  set_flag(PIPE_M, PIPE_MTE1, EVENT_ID1);
  set_flag(PIPE_M, PIPE_MTE1, EVENT_ID0);
  set_padding((uint64_t)0);
  copy_gm_to_cbuf(((__cbuf__ half *)weight_five_local_L1 + 0), ((__gm__ half *)weight_five + 0), 0, 1, 3200, 0, 0, PAD_NONE);
  for (int32_t dx_batch_idx_outer_inner = 0; dx_batch_idx_outer_inner < 64; ++dx_batch_idx_outer_inner) {
    wait_flag(PIPE_MTE1, PIPE_MTE2, EVENT_ID0);
    copy_gm_to_cbuf(((__cbuf__ half *)out_diff_local_L1 + 0), ((__gm__ half *)out_diff + (dx_batch_idx_outer_inner * 4096)), 0, 1, 256, 0, 0, PAD_NONE);
    set_flag(PIPE_MTE2, PIPE_MTE1, EVENT_ID0);
    set_fmatrix((uint64_t)1130315133747208);
    wait_flag(PIPE_V, PIPE_M, EVENT_ID0);
    wait_flag(PIPE_MTE2, PIPE_MTE1, EVENT_ID0);
    for (int32_t axis_k1_outer_db = 0; axis_k1_outer_db < 10; ++axis_k1_outer_db) {
      wait_flag(PIPE_M, PIPE_MTE1, EVENT_ID0);
      for (int32_t lower = 0; lower < 5; ++lower) {
        pipe_barrier(PIPE_MTE1);
        img2col_cbuf_to_ca(((__ca__ half *)im2col_fractal_1 + (lower * 1280)), ((__cbuf__ half *)out_diff_local_L1 + 0), ((uint64_t)(((((int64_t)(axis_k1_outer_db * 2)) * (int64_t)5) - ((int64_t)(((uint64_t)(((int64_t)(axis_k1_outer_db * 2)) / (int64_t)5)) * (uint64_t)25))) % (int64_t)5)), ((uint64_t)(((int64_t)(axis_k1_outer_db * 2)) % (int64_t)5)), (((((int64_t)lower) * (int64_t)16) % (int64_t)12) - (int64_t)4), (((((int64_t)lower) * (int64_t)16) / (int64_t)12) - (int64_t)4), ((uint64_t)(((int64_t)(axis_k1_outer_db * 2)) / (int64_t)5)), (uint64_t)1, (uint64_t)1, (uint64_t)5, (uint64_t)5, (uint64_t)1, (uint64_t)1, (uint64_t)1, (uint64_t)0, (uint64_t)5, (csize_t)0);
      }
      for (int32_t w_k1_idx = 0; w_k1_idx < 5; ++w_k1_idx) {
        load_cbuf_to_cb(((__cb__ half *)w_col_2 + (w_k1_idx * 512)), ((__cbuf__ half *)weight_five_local_L1 + ((((((axis_k1_outer_db * 10) + w_k1_idx) / 25) * 256) + 24576) - ((((axis_k1_outer_db * 10) + w_k1_idx) % 25) * 1024))), 0, 2, 100, 0, 1);
      }
      set_flag(PIPE_MTE1, PIPE_M, EVENT_ID0);
      wait_flag(PIPE_MTE1, PIPE_M, EVENT_ID0);
      mad(((__cc__ float *)C + 0), ((__ca__ half *)im2col_fractal_1 + 0), ((__cb__ half *)w_col_2 + 0), 80, 80, 32, (axis_k1_outer_db == 0));
      set_flag(PIPE_M, PIPE_MTE1, EVENT_ID0);
      wait_flag(PIPE_M, PIPE_MTE1, EVENT_ID1);
      for (int32_t lower1 = 0; lower1 < 5; ++lower1) {
        pipe_barrier(PIPE_MTE1);
        img2col_cbuf_to_ca(((__ca__ half *)im2col_fractal_3 + (lower1 * 1280)), ((__cbuf__ half *)out_diff_local_L1 + 0), ((uint64_t)(((((int64_t)((axis_k1_outer_db * 2) + 1)) * (int64_t)5) - ((int64_t)(((uint64_t)(((int64_t)((axis_k1_outer_db * 2) + 1)) / (int64_t)5)) * (uint64_t)25))) % (int64_t)5)), ((uint64_t)(((int64_t)((axis_k1_outer_db * 2) + 1)) % (int64_t)5)), (((((int64_t)lower1) * (int64_t)16) % (int64_t)12) - (int64_t)4), (((((int64_t)lower1) * (int64_t)16) / (int64_t)12) - (int64_t)4), ((uint64_t)(((int64_t)((axis_k1_outer_db * 2) + 1)) / (int64_t)5)), (uint64_t)1, (uint64_t)1, (uint64_t)5, (uint64_t)5, (uint64_t)1, (uint64_t)1, (uint64_t)1, (uint64_t)0, (uint64_t)5, (csize_t)0);
      }
      for (int32_t w_k1_idx1 = 0; w_k1_idx1 < 5; ++w_k1_idx1) {
        load_cbuf_to_cb(((__cb__ half *)w_col_4 + (w_k1_idx1 * 512)), ((__cbuf__ half *)weight_five_local_L1 + (((((((axis_k1_outer_db * 10) + w_k1_idx1) + 5) / 25) * 256) + 24576) - (((((axis_k1_outer_db * 10) + w_k1_idx1) + 5) % 25) * 1024))), 0, 2, 100, 0, 1);
      }
      set_flag(PIPE_MTE1, PIPE_M, EVENT_ID0);
      wait_flag(PIPE_MTE1, PIPE_M, EVENT_ID0);
      mad(((__cc__ float *)C + 0), ((__ca__ half *)im2col_fractal_3 + 0), ((__cb__ half *)w_col_4 + 0), 80, 80, 32, (int8_t)0);
      set_flag(PIPE_M, PIPE_MTE1, EVENT_ID1);
    }
    set_flag(PIPE_M, PIPE_V, EVENT_ID0);
    set_flag(PIPE_MTE1, PIPE_MTE2, EVENT_ID0);
    wait_flag(PIPE_MTE3, PIPE_V, EVENT_ID0);
    wait_flag(PIPE_M, PIPE_V, EVENT_ID0);
    copy_matrix_cc_to_ubuf(((__ubuf__ half *)c_ub + 0), ((__cc__ float *)C + 0), 0, 1, 10, 0, 0, CRMODE_F32toF16_NONE);
    set_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
    set_flag(PIPE_V, PIPE_M, EVENT_ID0);
    wait_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
    for (int32_t dx_cin1_idx_inner = 0; dx_cin1_idx_inner < 2; ++dx_cin1_idx_inner) {
      copy_ubuf_to_gm(((__gm__ half *)c_ddr + ((dx_batch_idx_outer_inner * 4608) + (dx_cin1_idx_inner * 2304))), ((__ubuf__ half *)c_ub + (dx_cin1_idx_inner * 1280)), 0, 1, 80, 0, 0);
    }
    set_flag(PIPE_MTE3, PIPE_V, EVENT_ID0);
    wait_flag(PIPE_MTE1, PIPE_MTE2, EVENT_ID1);
    copy_gm_to_cbuf(((__cbuf__ half *)out_diff_local_L11 + 0), ((__gm__ half *)out_diff + ((dx_batch_idx_outer_inner * 4096) + 256)), 0, 4, 48, 16, 0, PAD_NONE);
    set_flag(PIPE_MTE2, PIPE_MTE1, EVENT_ID0);
    set_fmatrix((uint64_t)288234791378485256);
    wait_flag(PIPE_V, PIPE_M, EVENT_ID1);
    wait_flag(PIPE_MTE2, PIPE_MTE1, EVENT_ID0);
    for (int32_t axis_k1_outer_db1 = 0; axis_k1_outer_db1 < 10; ++axis_k1_outer_db1) {
      wait_flag(PIPE_M, PIPE_MTE1, EVENT_ID0);
      for (int32_t lower2 = 0; lower2 < 4; ++lower2) {
        pipe_barrier(PIPE_MTE1);
        img2col_cbuf_to_ca(((__ca__ half *)im2col_fractal_5 + (lower2 * 1280)), ((__cbuf__ half *)out_diff_local_L11 + 0), ((uint64_t)(((((int64_t)(axis_k1_outer_db1 * 2)) * (int64_t)5) - ((int64_t)(((uint64_t)(((int64_t)(axis_k1_outer_db1 * 2)) / (int64_t)5)) * (uint64_t)25))) % (int64_t)5)), ((uint64_t)(((int64_t)(axis_k1_outer_db1 * 2)) % (int64_t)5)), ((((((int64_t)lower2) * (int64_t)16) + (int64_t)8) % (int64_t)12) - (int64_t)4), (((((int64_t)lower2) * (int64_t)16) + (int64_t)8) / (int64_t)12), ((uint64_t)(((int64_t)(axis_k1_outer_db1 * 2)) / (int64_t)5)), (uint64_t)1, (uint64_t)1, (uint64_t)5, (uint64_t)5, (uint64_t)1, (uint64_t)1, (uint64_t)1, (uint64_t)0, (uint64_t)5, (csize_t)0);
      }
      for (int32_t w_k1_idx2 = 0; w_k1_idx2 < 5; ++w_k1_idx2) {
        load_cbuf_to_cb(((__cb__ half *)w_col_2 + (w_k1_idx2 * 512)), ((__cbuf__ half *)weight_five_local_L1 + ((((((axis_k1_outer_db1 * 10) + w_k1_idx2) / 25) * 256) + 24576) - ((((axis_k1_outer_db1 * 10) + w_k1_idx2) % 25) * 1024))), 0, 2, 100, 0, 1);
      }
      set_flag(PIPE_MTE1, PIPE_M, EVENT_ID0);
      pipe_barrier(PIPE_M);
      wait_flag(PIPE_MTE1, PIPE_M, EVENT_ID0);
      mad(((__cc__ float *)C1 + 0), ((__ca__ half *)im2col_fractal_5 + 0), ((__cb__ half *)w_col_2 + 0), 64, 80, 32, (axis_k1_outer_db1 == 0));
      set_flag(PIPE_M, PIPE_MTE1, EVENT_ID0);
      wait_flag(PIPE_M, PIPE_MTE1, EVENT_ID1);
      for (int32_t lower3 = 0; lower3 < 4; ++lower3) {
        pipe_barrier(PIPE_MTE1);
        img2col_cbuf_to_ca(((__ca__ half *)im2col_fractal_7 + (lower3 * 1280)), ((__cbuf__ half *)out_diff_local_L11 + 0), ((uint64_t)(((((int64_t)((axis_k1_outer_db1 * 2) + 1)) * (int64_t)5) - ((int64_t)(((uint64_t)(((int64_t)((axis_k1_outer_db1 * 2) + 1)) / (int64_t)5)) * (uint64_t)25))) % (int64_t)5)), ((uint64_t)(((int64_t)((axis_k1_outer_db1 * 2) + 1)) % (int64_t)5)), ((((((int64_t)lower3) * (int64_t)16) + (int64_t)8) % (int64_t)12) - (int64_t)4), (((((int64_t)lower3) * (int64_t)16) + (int64_t)8) / (int64_t)12), ((uint64_t)(((int64_t)((axis_k1_outer_db1 * 2) + 1)) / (int64_t)5)), (uint64_t)1, (uint64_t)1, (uint64_t)5, (uint64_t)5, (uint64_t)1, (uint64_t)1, (uint64_t)1, (uint64_t)0, (uint64_t)5, (csize_t)0);
      }
      for (int32_t w_k1_idx3 = 0; w_k1_idx3 < 5; ++w_k1_idx3) {
        load_cbuf_to_cb(((__cb__ half *)w_col_4 + (w_k1_idx3 * 512)), ((__cbuf__ half *)weight_five_local_L1 + (((((((axis_k1_outer_db1 * 10) + w_k1_idx3) + 5) / 25) * 256) + 24576) - (((((axis_k1_outer_db1 * 10) + w_k1_idx3) + 5) % 25) * 1024))), 0, 2, 100, 0, 1);
      }
      set_flag(PIPE_MTE1, PIPE_M, EVENT_ID0);
      pipe_barrier(PIPE_M);
      wait_flag(PIPE_MTE1, PIPE_M, EVENT_ID0);
      mad(((__cc__ float *)C1 + 0), ((__ca__ half *)im2col_fractal_7 + 0), ((__cb__ half *)w_col_4 + 0), 64, 80, 32, (int8_t)0);
      set_flag(PIPE_M, PIPE_MTE1, EVENT_ID1);
    }
    set_flag(PIPE_M, PIPE_V, EVENT_ID0);
    set_flag(PIPE_MTE1, PIPE_MTE2, EVENT_ID1);
    wait_flag(PIPE_MTE3, PIPE_V, EVENT_ID1);
    wait_flag(PIPE_M, PIPE_V, EVENT_ID0);
    copy_matrix_cc_to_ubuf(((__ubuf__ half *)c_ub1 + 0), ((__cc__ float *)C1 + 0), 0, 1, 8, 0, 0, CRMODE_F32toF16_NONE);
    set_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
    set_flag(PIPE_V, PIPE_M, EVENT_ID1);
    pipe_barrier(PIPE_MTE3);
    wait_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
    for (int32_t dx_cin1_idx_inner1 = 0; dx_cin1_idx_inner1 < 2; ++dx_cin1_idx_inner1) {
      copy_ubuf_to_gm(((__gm__ half *)c_ddr + (((dx_batch_idx_outer_inner * 4608) + (dx_cin1_idx_inner1 * 2304)) + 1280)), ((__ubuf__ half *)c_ub1 + (dx_cin1_idx_inner1 * 1024)), 0, 1, 64, 0, 0);
    }
    set_flag(PIPE_MTE3, PIPE_V, EVENT_ID1);
  }
  wait_flag(PIPE_M, PIPE_MTE1, EVENT_ID0);
  wait_flag(PIPE_M, PIPE_MTE1, EVENT_ID1);
  wait_flag(PIPE_MTE1, PIPE_MTE2, EVENT_ID0);
  wait_flag(PIPE_V, PIPE_M, EVENT_ID0);
  wait_flag(PIPE_MTE3, PIPE_V, EVENT_ID0);
  wait_flag(PIPE_MTE1, PIPE_MTE2, EVENT_ID1);
  wait_flag(PIPE_V, PIPE_M, EVENT_ID1);
  wait_flag(PIPE_MTE3, PIPE_V, EVENT_ID1);
  pipe_barrier(PIPE_ALL);
}

