#ifdef __CCE_KT_TEST__
#define __aicore__ 
#else
#define __aicore__ [aicore]
#endif


#define VERIFY_L2Buffer_OK(l2DataIndex) \
	(0x01 & (((0xFF)&(~l2_in_main)) >> (l2DataIndex)))

extern "C"  __global__ __aicore__ void matmul_op_16_64_512_TA_NTB_nobias__kernel0(__gm__ half* __restrict__ tensor_a, __gm__ half* __restrict__ tensor_b, __gm__ half* __restrict__ tensor_c_gm,int64_t index0, uint64_t offset0, int64_t index1, uint64_t offset1, int64_t index2, uint64_t offset2) {
  if (index0 >= 0) {
    if (VERIFY_L2Buffer_OK(index0)) {
      tensor_a = (__gm__ half*)((uint64_t)l2_vaddr_base + offset0);
    }
  }
  if (index1 >= 0) {
    if (VERIFY_L2Buffer_OK(index1)) {
      tensor_b = (__gm__ half*)((uint64_t)l2_vaddr_base + offset1);
    }
  }
  if (index2 >= 0) {
    if (VERIFY_L2Buffer_OK(index2)) {
      tensor_c_gm = (__gm__ half*)((uint64_t)l2_vaddr_base + offset2);
    }
  }
set_vector_mask((uint64_t)-1, (uint64_t)-1);
__ubuf__   half* tensor_a_ub_1 = (__ubuf__  half *)get_imm(0);
__cbuf__   half* tensor_a_l1_3 = (__cbuf__  half *)get_imm(0);
__ubuf__   half* tensor_b_ub_4 = (__ubuf__  half *)get_imm(1024);
__ubuf__   half* tensor_b_ub_fract_5 = (__ubuf__  half *)get_imm(33792);
__cbuf__   half* tensor_b_l1_6 = (__cbuf__  half *)get_imm(1024);
__ca__   half* tensor_a_l0a_7 = (__ca__  half *)get_imm(0);
__cb__   half* tensor_b_l0b_8 = (__cb__  half *)get_imm(0);
__cc__   float* tensor_c = (__cc__  float *)get_imm(0);
__ubuf__   half* tensor_a_ub_9 = (__ubuf__  half *)get_imm(66560);
__cbuf__   half* tensor_a_l1_11 = (__cbuf__  half *)get_imm(33792);
__ubuf__   half* tensor_b_ub_12 = (__ubuf__  half *)get_imm(67584);
__ubuf__   half* tensor_b_ub_fract_13 = (__ubuf__  half *)get_imm(100352);
__ca__   half* tensor_a_l0a_15 = (__ca__  half *)get_imm(1024);
__cb__   half* tensor_b_l0b_16 = (__cb__  half *)get_imm(32768);
__ubuf__   half* tensor_c_ub = (__ubuf__  half *)get_imm(0);
__ubuf__   half* tensor_c_ub_fract = (__ubuf__  half *)get_imm(16384);
  set_vector_mask((uint64_t)18446744073709551615, (uint64_t)18446744073709551615);
  copy_gm_to_ubuf(((__ubuf__ half *)tensor_a_ub_1 + 0), ((__gm__ half *)tensor_a + 0), 0, 1, 32, 0, 0);
  set_flag(PIPE_MTE2, PIPE_V, EVENT_ID0);
  wait_flag(PIPE_MTE2, PIPE_V, EVENT_ID0);
  vmax(((__ubuf__ half *)tensor_a_ub_1 + 0), ((__ubuf__ half *)tensor_a_ub_1 + 0), ((__ubuf__ half *)tensor_a_ub_1 + 0), (uint8_t)4, (uint8_t)1, (uint8_t)1, (uint8_t)1, (uint8_t)8, (uint8_t)8, (uint8_t)8);
  set_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
  wait_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
  copy_ubuf_to_cbuf(((__cbuf__ half *)tensor_a_l1_3 + 0), ((__ubuf__ half *)tensor_a_ub_1 + 0), 0, 1, 32, 0, 0);
  set_flag(PIPE_MTE3, PIPE_MTE1, EVENT_ID0);
  copy_gm_to_ubuf(((__ubuf__ half *)tensor_b_ub_4 + 0), ((__gm__ half *)tensor_b + 0), 0, 1, 1024, 0, 0);
  set_flag(PIPE_MTE2, PIPE_V, EVENT_ID0);
  wait_flag(PIPE_MTE2, PIPE_V, EVENT_ID0);
  for (int32_t iter_lower_outer_0 = 0; iter_lower_outer_0 < 2; ++iter_lower_outer_0) {
    for (int32_t iter_cut_axis_1 = 0; iter_cut_axis_1 < 2; ++iter_cut_axis_1) {
      vmax(((__ubuf__ half *)tensor_b_ub_fract_5 + ((iter_lower_outer_0 * 8192) + (iter_cut_axis_1 * 128))), ((__ubuf__ half *)tensor_b_ub_4 + ((iter_lower_outer_0 * 8192) + (iter_cut_axis_1 * 4096))), ((__ubuf__ half *)tensor_b_ub_4 + ((iter_lower_outer_0 * 8192) + (iter_cut_axis_1 * 4096))), (uint8_t)32, (uint8_t)1, (uint8_t)32, (uint8_t)32, (uint8_t)16, (uint8_t)1, (uint8_t)1);
    }
  }
  set_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
  wait_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
  copy_ubuf_to_cbuf(((__cbuf__ half *)tensor_b_l1_6 + 0), ((__ubuf__ half *)tensor_b_ub_fract_5 + 0), 0, 1, 1024, 0, 0);
  set_flag(PIPE_MTE3, PIPE_MTE1, EVENT_ID1);
  wait_flag(PIPE_MTE3, PIPE_MTE1, EVENT_ID0);
  load_cbuf_to_ca(((__ca__ half *)tensor_a_l0a_7 + 0), ((__cbuf__ half *)tensor_a_l1_3 + 0), 0, 2, 1, 0, 1);
  wait_flag(PIPE_MTE3, PIPE_MTE1, EVENT_ID1);
  load_cbuf_to_cb(((__cb__ half *)tensor_b_l0b_8 + 0), ((__cbuf__ half *)tensor_b_l1_6 + 0), 0, 64, 1, 0, 1);
  set_flag(PIPE_MTE1, PIPE_M, EVENT_ID0);
  set_flag(PIPE_MTE1, PIPE_MTE3, EVENT_ID0);
  wait_flag(PIPE_MTE1, PIPE_M, EVENT_ID0);
  mad(((__cc__ float *)tensor_c + 0), ((__ca__ half *)tensor_a_l0a_7 + 0), ((__cb__ half *)tensor_b_l0b_8 + 0), 16, 32, 512, (int8_t)1);
  copy_gm_to_ubuf(((__ubuf__ half *)tensor_a_ub_9 + 0), ((__gm__ half *)tensor_a + 512), 0, 1, 32, 0, 0);
  set_flag(PIPE_MTE2, PIPE_V, EVENT_ID0);
  wait_flag(PIPE_MTE2, PIPE_V, EVENT_ID0);
  vmax(((__ubuf__ half *)tensor_a_ub_9 + 0), ((__ubuf__ half *)tensor_a_ub_9 + 0), ((__ubuf__ half *)tensor_a_ub_9 + 0), (uint8_t)4, (uint8_t)1, (uint8_t)1, (uint8_t)1, (uint8_t)8, (uint8_t)8, (uint8_t)8);
  set_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
  wait_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
  copy_ubuf_to_cbuf(((__cbuf__ half *)tensor_a_l1_11 + 0), ((__ubuf__ half *)tensor_a_ub_9 + 0), 0, 1, 32, 0, 0);
  set_flag(PIPE_MTE3, PIPE_MTE1, EVENT_ID0);
  copy_gm_to_ubuf(((__ubuf__ half *)tensor_b_ub_12 + 0), ((__gm__ half *)tensor_b + 16384), 0, 1, 1024, 0, 0);
  set_flag(PIPE_MTE2, PIPE_V, EVENT_ID0);
  wait_flag(PIPE_MTE2, PIPE_V, EVENT_ID0);
  for (int32_t iter_lower_outer_01 = 0; iter_lower_outer_01 < 2; ++iter_lower_outer_01) {
    for (int32_t iter_cut_axis_11 = 0; iter_cut_axis_11 < 2; ++iter_cut_axis_11) {
      vmax(((__ubuf__ half *)tensor_b_ub_fract_13 + ((iter_lower_outer_01 * 8192) + (iter_cut_axis_11 * 128))), ((__ubuf__ half *)tensor_b_ub_12 + ((iter_lower_outer_01 * 8192) + (iter_cut_axis_11 * 4096))), ((__ubuf__ half *)tensor_b_ub_12 + ((iter_lower_outer_01 * 8192) + (iter_cut_axis_11 * 4096))), (uint8_t)32, (uint8_t)1, (uint8_t)32, (uint8_t)32, (uint8_t)16, (uint8_t)1, (uint8_t)1);
    }
  }
  set_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
  wait_flag(PIPE_MTE1, PIPE_MTE3, EVENT_ID0);
  wait_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
  copy_ubuf_to_cbuf(((__cbuf__ half *)tensor_b_l1_6 + 0), ((__ubuf__ half *)tensor_b_ub_fract_13 + 0), 0, 1, 1024, 0, 0);
  set_flag(PIPE_MTE3, PIPE_MTE1, EVENT_ID1);
  wait_flag(PIPE_MTE3, PIPE_MTE1, EVENT_ID0);
  load_cbuf_to_ca(((__ca__ half *)tensor_a_l0a_15 + 0), ((__cbuf__ half *)tensor_a_l1_11 + 0), 0, 2, 1, 0, 1);
  wait_flag(PIPE_MTE3, PIPE_MTE1, EVENT_ID1);
  load_cbuf_to_cb(((__cb__ half *)tensor_b_l0b_16 + 0), ((__cbuf__ half *)tensor_b_l1_6 + 0), 0, 64, 1, 0, 1);
  set_flag(PIPE_MTE1, PIPE_M, EVENT_ID0);
  pipe_barrier(PIPE_M);
  wait_flag(PIPE_MTE1, PIPE_M, EVENT_ID0);
  mad(((__cc__ float *)tensor_c + 0), ((__ca__ half *)tensor_a_l0a_15 + 0), ((__cb__ half *)tensor_b_l0b_16 + 0), 16, 32, 512, (int8_t)0);
  set_flag(PIPE_M, PIPE_V, EVENT_ID0);
  wait_flag(PIPE_M, PIPE_V, EVENT_ID0);
  copy_matrix_cc_to_ubuf(((__ubuf__ half *)tensor_c_ub + 0), ((__cc__ float *)tensor_c + 0), 0, 1, 32, 0, 0, CRMODE_F32toF16_NONE);
  pipe_barrier(PIPE_V);
  for (int32_t iter_cut_axis_12 = 0; iter_cut_axis_12 < 2; ++iter_cut_axis_12) {
    vmax(((__ubuf__ half *)tensor_c_ub_fract + (iter_cut_axis_12 * 4096)), ((__ubuf__ half *)tensor_c_ub + (iter_cut_axis_12 * 128)), ((__ubuf__ half *)tensor_c_ub + (iter_cut_axis_12 * 128)), (uint8_t)32, (uint8_t)32, (uint8_t)1, (uint8_t)1, (uint8_t)1, (uint8_t)16, (uint8_t)16);
  }
  set_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
  wait_flag(PIPE_V, PIPE_MTE3, EVENT_ID0);
  copy_ubuf_to_gm(((__gm__ half *)tensor_c_gm + 0), ((__ubuf__ half *)tensor_c_ub_fract + 0), 0, 1, 512, 0, 0);
  pipe_barrier(PIPE_ALL);
}

